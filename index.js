const express = require("express");
const bodyParser = require("body-parser");
const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();
const questions = require("./questions/questions");
const { saveAnswersToGoogleDrive } = require("./api/googleApi");

const app = express();
app.use(bodyParser.json());

const token = process.env.TELEGRAM_API;
const bot = new TelegramBot(token);

const webhookUrl = `${process.env.API_ADRESS}webhook/${token}`;

bot.setWebHook(webhookUrl);

let currentQuestion = 0;
let answers = [];
let isFillingSurvey = false;
let chatName = "";

function startSurvey(chatId) {
  currentQuestion = 0;
  answers = [];
  chatName = "";

  isFillingSurvey = true;

  bot.sendMessage(
    chatId,
    `–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: ${questions[currentQuestion]}`
  );
}

const defaultButtons = {
  reply_markup: {
    keyboard: [[{ text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É" }]],
    resize_keyboard: true,
  },
};

const genderButton = {
  reply_markup: {
    keyboard: [[{ text: "–ú—É–∂—Å–∫–æ–π" }, { text: "–ñ–µ–Ω—Å–∫–∏–π" }]],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç!üëã 

–Ø - –ï–≥–æ—Ä –ß–µ–±–æ—Ç–∞—Ä—å, —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä, —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º –≤ —Å–ø–æ—Ä—Ç–µ, –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º,  —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω—ã–º–∏, —Å—Ç—Ä–æ–π–Ω—ã–º–∏, –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏! üí™

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∞–Ω–∫–µ—Ç–µ, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏.üëå`;

app.post(`/webhook/${token}`, (req, res) => {
  const { message } = req.body;

  console.log();

  if (message && message.text) {
    const chatId = message.chat.id;
    const text = message.text;

    if (text === "/start") {
      bot.sendPhoto(chatId, "./assets/egor.jpg", {
        caption: welcomeMessage,
        reply_markup: {
          keyboard: [[{ text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É" }]],
          resize_keyboard: true,
        },
      });
    } else if (text === "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É") {
      startSurvey(chatId);
    } else if (text === "–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!") {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    } else if (isFillingSurvey) {
      if (currentQuestion < questions.length) {
        if (questions[currentQuestion] === "–§.–ò.–û.") {
          chatName = text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chatName
        }
        if (questions[currentQuestion] === "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:") {
          const genderResponse = text.trim().toLowerCase();
          if (genderResponse === "–º—É–∂—Å–∫–æ–π" || genderResponse === "–∂–µ–Ω—Å–∫–∏–π") {
            const answer = text; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            answers.push(
              `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1}: ${
                questions[currentQuestion]
              }\n–û—Ç–≤–µ—Ç: ${answer}`
            );
            currentQuestion++;
            if (currentQuestion < questions.length) {
              bot.sendMessage(
                chatId,
                `${questions[currentQuestion]}`,
                defaultButtons
              );
            } else {
              bot.sendMessage(chatId, "–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!");

              // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ
              saveAnswersToGoogleDrive(chatName, answers)
                .then(() => {
                  isFillingSurvey = false;
                })
                .catch((error) => {
                  console.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞ Google –î–∏—Å–∫–µ:",
                    error
                  );
                });
            }
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–ª–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–º—É –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
            bot.sendMessage(
              chatId,
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫ (–ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π).",
              genderButton
            );
          }
        } else {
          // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
          const answer = text.trim() || "-";
          answers.push(
            `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1}: ${
              questions[currentQuestion]
            }\n–û—Ç–≤–µ—Ç: ${answer}`
          );
          currentQuestion++;
          if (currentQuestion < questions.length) {
            bot.sendMessage(
              chatId,
              `${questions[currentQuestion]}`,
              defaultButtons
            );
          } else {
            bot.sendMessage(chatId, "–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!");

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫–µ
            saveAnswersToGoogleDrive(chatName, answers)
              .then(() => {
                isFillingSurvey = false;
              })
              .catch((error) => {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞ Google –î–∏—Å–∫–µ:", error);
              });
          }
        }
      }
    }
  }

  res.sendStatus(200);
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Express.js server is listening on port ${port}`);
});
